// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shake_protocol.proto

#ifndef PROTOBUF_shake_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_shake_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace shake_protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_shake_5fprotocol_2eproto();
void protobuf_AssignDesc_shake_5fprotocol_2eproto();
void protobuf_ShutdownFile_shake_5fprotocol_2eproto();

class Command;
class Command_User;
class Command_UserPosition;

// ===================================================================

class Command_User : public ::google::protobuf::Message {
 public:
  Command_User();
  virtual ~Command_User();
  
  Command_User(const Command_User& from);
  
  inline Command_User& operator=(const Command_User& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_User& default_instance();
  
  void Swap(Command_User* other);
  
  // implements Message ----------------------------------------------
  
  Command_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command_User& from);
  void MergeFrom(const Command_User& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);
  
  // required bool ready = 4;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 4;
  inline bool ready() const;
  inline void set_ready(bool value);
  
  // @@protoc_insertion_point(class_scope:shake_protocol.Command.User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_ready();
  inline void clear_has_ready();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 color_;
  bool ready_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_shake_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_shake_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_shake_5fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static Command_User* default_instance_;
};
// -------------------------------------------------------------------

class Command_UserPosition : public ::google::protobuf::Message {
 public:
  Command_UserPosition();
  virtual ~Command_UserPosition();
  
  Command_UserPosition(const Command_UserPosition& from);
  
  inline Command_UserPosition& operator=(const Command_UserPosition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_UserPosition& default_instance();
  
  void Swap(Command_UserPosition* other);
  
  // implements Message ----------------------------------------------
  
  Command_UserPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command_UserPosition& from);
  void MergeFrom(const Command_UserPosition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // required bool finished = 3;
  inline bool has_finished() const;
  inline void clear_finished();
  static const int kFinishedFieldNumber = 3;
  inline bool finished() const;
  inline void set_finished(bool value);
  
  // @@protoc_insertion_point(class_scope:shake_protocol.Command.UserPosition)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_finished();
  inline void clear_has_finished();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  bool finished_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_shake_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_shake_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_shake_5fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static Command_UserPosition* default_instance_;
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();
  
  Command(const Command& from);
  
  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();
  
  void Swap(Command* other);
  
  // implements Message ----------------------------------------------
  
  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Command_User User;
  typedef Command_UserPosition UserPosition;
  
  // accessors -------------------------------------------------------
  
  // required uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // repeated .shake_protocol.Command.User users = 4;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 4;
  inline const ::shake_protocol::Command_User& users(int index) const;
  inline ::shake_protocol::Command_User* mutable_users(int index);
  inline ::shake_protocol::Command_User* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_User >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_User >*
      mutable_users();
  
  // repeated .shake_protocol.Command.UserPosition users_pos = 5;
  inline int users_pos_size() const;
  inline void clear_users_pos();
  static const int kUsersPosFieldNumber = 5;
  inline const ::shake_protocol::Command_UserPosition& users_pos(int index) const;
  inline ::shake_protocol::Command_UserPosition* mutable_users_pos(int index);
  inline ::shake_protocol::Command_UserPosition* add_users_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_UserPosition >&
      users_pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_UserPosition >*
      mutable_users_pos();
  
  // @@protoc_insertion_point(class_scope:shake_protocol.Command)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_User > users_;
  ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_UserPosition > users_pos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_shake_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_shake_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_shake_5fprotocol_2eproto();
  
  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// ===================================================================


// ===================================================================

// Command_User

// required uint32 id = 1;
inline bool Command_User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_User::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Command_User::id() const {
  return id_;
}
inline void Command_User::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool Command_User::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_User::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_User::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command_User::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Command_User::name() const {
  return *name_;
}
inline void Command_User::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Command_User::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Command_User::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command_User::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Command_User::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 color = 3;
inline bool Command_User::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command_User::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command_User::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command_User::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 Command_User::color() const {
  return color_;
}
inline void Command_User::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// required bool ready = 4;
inline bool Command_User::has_ready() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command_User::set_has_ready() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command_User::clear_has_ready() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command_User::clear_ready() {
  ready_ = false;
  clear_has_ready();
}
inline bool Command_User::ready() const {
  return ready_;
}
inline void Command_User::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
}

// -------------------------------------------------------------------

// Command_UserPosition

// required uint32 id = 1;
inline bool Command_UserPosition::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_UserPosition::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_UserPosition::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_UserPosition::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Command_UserPosition::id() const {
  return id_;
}
inline void Command_UserPosition::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 count = 2;
inline bool Command_UserPosition::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_UserPosition::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_UserPosition::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command_UserPosition::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Command_UserPosition::count() const {
  return count_;
}
inline void Command_UserPosition::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required bool finished = 3;
inline bool Command_UserPosition::has_finished() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command_UserPosition::set_has_finished() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command_UserPosition::clear_has_finished() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command_UserPosition::clear_finished() {
  finished_ = false;
  clear_has_finished();
}
inline bool Command_UserPosition::finished() const {
  return finished_;
}
inline void Command_UserPosition::set_finished(bool value) {
  set_has_finished();
  finished_ = value;
}

// -------------------------------------------------------------------

// Command

// required uint32 cmd = 1;
inline bool Command::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 Command::cmd() const {
  return cmd_;
}
inline void Command::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional string name = 2;
inline bool Command::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Command::name() const {
  return *name_;
}
inline void Command::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Command::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Command::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Command::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 id = 3;
inline bool Command::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Command::id() const {
  return id_;
}
inline void Command::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .shake_protocol.Command.User users = 4;
inline int Command::users_size() const {
  return users_.size();
}
inline void Command::clear_users() {
  users_.Clear();
}
inline const ::shake_protocol::Command_User& Command::users(int index) const {
  return users_.Get(index);
}
inline ::shake_protocol::Command_User* Command::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::shake_protocol::Command_User* Command::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_User >&
Command::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_User >*
Command::mutable_users() {
  return &users_;
}

// repeated .shake_protocol.Command.UserPosition users_pos = 5;
inline int Command::users_pos_size() const {
  return users_pos_.size();
}
inline void Command::clear_users_pos() {
  users_pos_.Clear();
}
inline const ::shake_protocol::Command_UserPosition& Command::users_pos(int index) const {
  return users_pos_.Get(index);
}
inline ::shake_protocol::Command_UserPosition* Command::mutable_users_pos(int index) {
  return users_pos_.Mutable(index);
}
inline ::shake_protocol::Command_UserPosition* Command::add_users_pos() {
  return users_pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_UserPosition >&
Command::users_pos() const {
  return users_pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::shake_protocol::Command_UserPosition >*
Command::mutable_users_pos() {
  return &users_pos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace shake_protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_shake_5fprotocol_2eproto__INCLUDED
